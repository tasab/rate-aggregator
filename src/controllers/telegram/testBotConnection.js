import TelegramBot from 'node-telegram-bot-api';
import { LOG_ERROR, logger } from '../../utils/logger.js';

export const testBotConnection = async (req, res) => {
  try {
    const { botToken, chatId } = req.body;

    if (!botToken || !chatId) {
      return res.status(400).json({
        success: false,
        message: "Bot token —Ç–∞ chat ID —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏",
      });
    }

    const bot = new TelegramBot(botToken);

    try {
      const chatInfo = await bot.getChat(chatId);

      const testMessage = `
      üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      ‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!
      ü§ñ –ë–æ—Ç: ${(await bot.getMe()).first_name}
      üí¨ –ß–∞—Ç: ${chatInfo.title || chatInfo.first_name || '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç'}
      ‚è∞ –ß–∞—Å —Ç–µ—Å—Ç—É: ${new Date().toLocaleString('uk-UA')}
      `;

      const sentMessage = await bot.sendMessage(chatId, testMessage);

      return res.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!',
        data: {
          botInfo: {
            id: (await bot.getMe()).id,
            name: (await bot.getMe()).first_name,
            username: (await bot.getMe()).username,
          },
          chatInfo: {
            id: chatInfo.id,
            title: chatInfo.title,
            type: chatInfo.type,
            memberCount:
              chatInfo.all_members_are_administrators !== undefined
                ? '–ì—Ä—É–ø–∞'
                : '–ù–µ–≤—ñ–¥–æ–º–æ',
          },
          messageId: sentMessage.message_id,
        },
      });
    } catch (telegramError) {
      let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ Telegram API';

      if (telegramError.code === 'ETELEGRAM') {
        switch (telegramError.response?.body?.error_code) {
          case 400:
            errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π chat ID –∞–±–æ –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á–∞—Ç—É';
            break;
          case 401:
            errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π bot token';
            break;
          case 403:
            errorMessage =
              '–ë–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∞–±–æ –Ω–µ –¥–æ–¥–∞–Ω–∏–π –¥–æ –≥—Ä—É–ø–∏';
            break;
          case 404:
            errorMessage = '–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
            break;
          default:
            errorMessage =
              telegramError.response?.body?.description || errorMessage;
        }
      }

      return res.status(400).json({
        success: false,
        message: errorMessage,
        error: {
          code: telegramError.response?.body?.error_code,
          description: telegramError.response?.body?.description,
        },
      });
    }
  } catch (error) {
    logger(error, 'Failed to load: testBotConnection', LOG_ERROR);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message,
    });
  }
};
